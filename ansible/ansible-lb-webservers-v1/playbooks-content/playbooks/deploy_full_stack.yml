# debug template:
#
# - hosts: localhost
# gather_facts: false
# tasks:
# - debug:
# var:
# hostvars['localhost']['ecorz_nw'].id
---
- hosts: localhost
  gather_facts: false
  vars:
      register_upstream: []
  tasks:
    - name: create network
      vars:
        nw_name: "{{ nw_name_par }}"
      include_role:
        name: create_network
    - name: create subnet
      vars:
        subnet_name: "{{ subnet_name_par }}"
        nw_id: "{{ hostvars['localhost']['ecorz_nw'].id }}"
      include_role:
        name: create_subnet
    - name: create router
      vars:
        router_name: "{{ router_name_par }}"
        interface_name: ecorz_subnet
      include_role:
        name: create_router
    - name: create security group
      vars:
        sec_group_name: "{{ sec_group_name_ans }}"
      include_role:
        name: create_security_group
    - name: create security group rule
      vars:
        sec_group_name: "{{ sec_group_name_ans }}"
        port_nmbr: "{{ port_nmbr_ssh }}"
      include_role:
        name: create_rule
    - name: create security group
      vars:
        sec_group_name: "{{ sec_group_name_webs }}"
      include_role:
        name: create_security_group
    - name: create security group rule
      vars:
        sec_group_name: "{{ sec_group_name_webs }}"
        port_nmbr: "{{ port_nmbr_web }}"
      include_role:
        name: create_rule
    - name: Display az1_count
      debug:
        var: webserver_az1_count
    - name: Display az2_count
      debug:
        var: webserver_az2_count
    - name: Deploy webservers in az1
      vars:
        webs_name: "{{ webserver_pref_az1 }}_{{ item }}"
        nw_name: ecorz_nw
        sec_group_list: [default,ansible,webserver]
        az: "{{ az1 }}"
      include_role:
        name: deploy_webserver
      with_sequence: start=1 end="{{ webserver_az1_count }}"
      when:
        - webserver_az1_count|int > 0
    - name: Deploy webservers in az2
      vars:
        webs_name: "{{ webserver_pref_az2 }}_{{ item }}"
        nw_name: ecorz_nw
        sec_group_list: [default,ansible,webserver]
        az: "{{ az2 }}"
      include_role:
        name: deploy_webserver
      with_sequence: start=1 end="{{ webserver_az2_count }}"
      when:
        - webserver_az2_count|int > 0
    - name: Deploy haproxy
      vars:
        haproxy_name: "haproxy_{{ item }}"
        nw_name: ecorz_nw
        sec_group_list: [default,ansible,webserver]
      include_role:
        name: deploy_haproxy
      with_sequence: start=1 end=1
    - name: Add webservers az1 to inventory
      add_host: name="{{ item.server.name }}" groups=webservers_az1 ansible_ssh_host="{{ item.server.accessIPv4 }}" ansible_all_ipv4_addresses=["{{ item.server.private_v4 }}"] ansible_ssh_private_key_file="{{ key_file_path }}"
      when:
        -  item.server.az == az1
      with_items:
        - "{{ register_upstream }}"
    - name: Add webservers az2 to inventory
      add_host: name="{{ item.server.name }}" groups=webservers_az2 ansible_ssh_host="{{ item.server.accessIPv4 }}" ansible_all_ipv4_addresses=["{{ item.server.private_v4 }}"] ansible_ssh_private_key_file="{{ key_file_path }}"
      when:
        -  item.server.az == az2
      with_items:
        - "{{ register_upstream }}"
    - name: Add haproxy to inventory
      add_host: name="{{ item.server.name }}" groups=haproxies ansible_ssh_host="{{ item.server.accessIPv4 }}" ansible_ssh_private_key_file="{{ key_file_path }}"
      when:
        - item.server.az != az1 and item.server.az != az2
      with_items:
        - "{{ register_upstream }}"
    - name: persist hostnames and ips in {{ hosts_tmp }}
      lineinfile: path={{ hosts_tmp }} line="{{ item.server.name }},{{ item.server.accessIPv4 }}" create=yes state=present
      with_items:
        - "{{ register_upstream }}"

- hosts: webservers:haproxies
  remote_user: ubuntu
  gather_facts: false
  roles:
    - wait_for_port1_ready

- hosts: webservers
  gather_facts: false
  pre_tasks:
    - import_tasks: inst_python_task.yml
      when: install_py2_on_hosts == "1"
  roles:
    - config_webservers

- hosts: haproxies
  gather_facts: false
  pre_tasks:
    - import_tasks: inst_python_task.yml
      when: install_py2_on_hosts == "1"
  roles:
    - config_haproxy

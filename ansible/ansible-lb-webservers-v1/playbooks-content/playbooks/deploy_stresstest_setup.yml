---
- hosts: localhost
  gather_facts: false
  vars:
      register_upstream: []
  tasks:
      #- name: debug
      #vars:
      #testi: "{{ hostvars[item].image_name }}"
      #debug:
      #msg: "{{ testi }}"
      #with_items:
      #- "{{ groups['docker_containers'] }}"
    - name: create network
      vars:
        nw_name: "{{ nw_name_par }}"
      include_role:
        name: create_network
    - name: create subnet
      vars:
        subnet_name: "{{ subnet_name_par }}"
        nw_id: "{{ hostvars['localhost']['ecorz_nw'].id }}"
      include_role:
        name: create_subnet
    - name: create router
      vars:
        router_name: "{{ router_name_par }}"
        interface_name: ecorz_subnet
      include_role:
        name: create_router
    - name: create security group
      vars:
        sec_group_name: "{{ sec_group_name_ans }}"
      include_role:
        name: create_security_group
    - name: create security group rule
      vars:
        sec_group_name: "{{ sec_group_name_ans }}"
        port_nmbr: "{{ port_nmbr_ssh }}"
      include_role:
        name: create_rule
    - name: create security group
      vars:
        sec_group_name: "{{ sec_group_name_docker }}"
      include_role:
        name: create_security_group
    - name: create security group rule
      vars:
        sec_group_name: "{{ sec_group_name_docker }}"
        port_nmbr: "{{ item }}"
      include_role:
        name: create_rule
      loop: "{{ docker_container_ports }}"
    - name: Deploy VMs for docker installation
      vars:
        docker_container_name: "{{ item }}"
        nw_name: ecorz_nw
        sec_group_list: [default,ansible,docker_ecorz]
      include_role:
        name: deploy_docker
      with_items:
        - "{{ groups['docker_containers'] }}"
    - name: remember custom set env-var with confsvr-ip content for use in stresstest_agent container
      set_fact:
          confsvr_ip_env: "CONFIGSERVER_URI=http://{{ item.server.accessIPv4 }}:8888"
      when:
        - item.server.name == "confsvr"
      with_items:
        - "{{ register_upstream }}"
    - name: remember custom set env-var with results_db-ip content for use in stresstest_agent container
      set_fact:
          results_db_ip_env: "RESULTS_DB_URI=jdbc:postgresql://{{ item.server.accessIPv4 }}:5432/ecorz_results"
      when:
        - item.server.name == "results_db"
      with_items:
        - "{{ register_upstream }}"
    - name: Add VM for docker {{ item.server.name }} installation to inventory
      add_host: >
        name="{{ item[1].server.name }}"
        groups=docker_containers
        ansible_ssh_host="{{ item[1].server.accessIPv4 }}"
        ansible_ssh_private_key_file="{{ key_file_path }}"
        image_name="{{ hostvars[item[0]].image_name }}"
        port_mapping="{{ hostvars[item[0]].port_mapping }}"
        env_var1="{{ hostvars[item[0]].env_var1 }}"
        env_var2="{{ hostvars[item[0]].env_var2 if hostvars[item[0]].container_name != hostvars['stresstest_agent'].container_name else confsvr_ip_env }}"
        env_var3="{{ hostvars[item[0]].env_var3 }}"
        env_var4="{{ hostvars[item[0]].env_var4 if hostvars[item[0]].container_name != hostvars['stresstest_agent'].container_name else results_db_ip_env }}"
        env_var5="{{ hostvars[item[0]].env_var5 }}"
      when:
        - hostvars[item[0]].container_name == item[1].server.name
      with_nested:
        - "{{ groups['docker_containers'] }}"
        - "{{ register_upstream }}"
    - name: persist relevant server vars in {{ hosts_tmp_stresstest }}
      lineinfile: >
          path={{ hosts_tmp_stresstest }}
          line="{{ item[1].server.name }},{{ item[1].server.accessIPv4 }},{{ hostvars[item[0]].image_name }},{{ hostvars[item[0]].port_mapping }},{{ hostvars[item[0]].env_var1 }},{{ hostvars[item[0]].env_var2 }},{{ hostvars[item[0]].env_var3 }},{{ hostvars[item[0]].env_var4 }},{{ hostvars[item[0]].env_var5 }}"
          create=yes state=present
      when:
        - hostvars[item[0]].container_name == item[1].server.name
      with_nested:
        - "{{ groups['docker_containers'] }}"
        - "{{ register_upstream }}"

- hosts: docker_containers
  remote_user: ubuntu
  gather_facts: false
  roles:
    - wait_for_port1_ready

- hosts: docker_containers
  remote_user: ubuntu
  gather_facts: false
  roles:
    - config_docker

- name: Destroy containers if they already exist
  import_playbook: destroy_containers.yml

- hosts: docker_containers
  remote_user: ubuntu
  become: yes
  gather_facts: false
  vars:
    container_name_: "{{ container_name }}"
    port_opts: "-p {{ port_mapping }}"
    env_opts: "-e {{ env_var1 }} -e {{ env_var2 }} -e {{ env_var3 }} -e {{ env_var4 }} -e {{ env_var5 }}"
  roles:
    - deploy_container
